# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Entry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title=None, label=None):  # noqa: E501
        """Entry - a model defined in OpenAPI

        :param title: The title of this Entry.  # noqa: E501
        :type title: str
        :param label: The label of this Entry.  # noqa: E501
        :type label: str
        """
        self.openapi_types = {
            'title': str,
            'label': str
        }

        self.attribute_map = {
            'title': 'title',
            'label': 'label'
        }

        self._title = title
        self._label = label

    @classmethod
    def from_dict(cls, dikt) -> 'Entry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Entry of this Entry.  # noqa: E501
        :rtype: Entry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this Entry.


        :return: The title of this Entry.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Entry.


        :param title: The title of this Entry.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def label(self):
        """Gets the label of this Entry.


        :return: The label of this Entry.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Entry.


        :param label: The label of this Entry.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label
