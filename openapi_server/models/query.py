# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Query(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, texts=None, context=None, options=None):  # noqa: E501
        """Query - a model defined in OpenAPI

        :param texts: The texts of this Query.  # noqa: E501
        :type texts: List[str]
        :param context: The context of this Query.  # noqa: E501
        :type context: List[str]
        :param options: The options of this Query.  # noqa: E501
        :type options: Dict[str, object]
        """
        self.openapi_types = {
            'texts': List[str],
            'context': List[str],
            'options': Dict[str, object]
        }

        self.attribute_map = {
            'texts': 'texts',
            'context': 'context',
            'options': 'options'
        }

        self._texts = texts
        self._context = context
        self._options = options

    @classmethod
    def from_dict(cls, dikt) -> 'Query':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Query of this Query.  # noqa: E501
        :rtype: Query
        """
        return util.deserialize_model(dikt, cls)

    @property
    def texts(self):
        """Gets the texts of this Query.


        :return: The texts of this Query.
        :rtype: List[str]
        """
        return self._texts

    @texts.setter
    def texts(self, texts):
        """Sets the texts of this Query.


        :param texts: The texts of this Query.
        :type texts: List[str]
        """

        self._texts = texts

    @property
    def context(self):
        """Gets the context of this Query.


        :return: The context of this Query.
        :rtype: List[str]
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Query.


        :param context: The context of this Query.
        :type context: List[str]
        """

        self._context = context

    @property
    def options(self):
        """Gets the options of this Query.


        :return: The options of this Query.
        :rtype: Dict[str, object]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Query.


        :param options: The options of this Query.
        :type options: Dict[str, object]
        """

        self._options = options
